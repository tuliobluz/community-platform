{"version":3,"file":"FieldTextarea-c63346af.js","sources":["../../src/FieldTextarea/FieldTextarea.tsx"],"sourcesContent":["import { useState } from 'react'\nimport { Text, Textarea } from 'theme-ui'\n\nimport { CharacterCount } from '../CharacterCount/CharacterCount'\n\nimport type { FieldRenderProps } from 'react-final-form'\n\ntype FieldProps = FieldRenderProps<any, any> & { children?: React.ReactNode }\nexport interface Props extends FieldProps {\n  // additional fields intending to pass down\n  disabled?: boolean\n  children?: React.ReactNode\n  showCharacterCount?: boolean\n  'data-cy'?: string\n  customOnBlur?: (event: any) => void\n  rows?: number\n}\n\ntype InputModifiers = {\n  capitalize?: boolean\n  trim?: boolean\n}\n\nconst capitalizeFirstLetter = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1)\n\nconst processInputModifiers = (value: any, modifiers: InputModifiers) => {\n  if (typeof value !== 'string') return value\n  if (modifiers.trim) {\n    value = value.trim()\n  }\n  if (modifiers.capitalize) {\n    value = capitalizeFirstLetter(value)\n  }\n  return value\n}\n\nexport const FieldTextarea = ({\n  input,\n  meta,\n  disabled,\n  modifiers,\n  customOnBlur,\n  minLength = 0,\n  maxLength,\n  showCharacterCount,\n  rows,\n  ...rest\n}: Props) => {\n  const [curLength, setLength] = useState<number>(input?.value?.length ?? 0)\n\n  return (\n    <>\n      <Textarea\n        disabled={disabled}\n        minLength={minLength}\n        maxLength={maxLength}\n        variant={meta?.error && meta?.touched ? 'textareaError' : 'textarea'}\n        rows={rows ? rows : 5}\n        sx={{\n          resize: rest?.style?.resize ? rest.style.resize : 'vertical',\n        }}\n        {...input}\n        {...rest}\n        onBlur={(e) => {\n          if (modifiers) {\n            e.target.value = processInputModifiers(e.target.value, modifiers)\n            input.onChange(e)\n          }\n          if (customOnBlur) {\n            customOnBlur(e)\n          }\n          input.onBlur()\n        }}\n        onChange={(ev) => {\n          showCharacterCount && setLength(ev.target.value.length)\n          input.onChange(ev)\n        }}\n      />\n\n      {meta.error && meta.touched && (\n        <Text sx={{ fontSize: 0, margin: 1, color: 'error' }}>\n          {meta.error}\n        </Text>\n      )}\n\n      {showCharacterCount && maxLength && (meta.touched || meta.dirty) && (\n        <CharacterCount\n          minSize={minLength}\n          maxSize={maxLength}\n          currentSize={curLength}\n        />\n      )}\n    </>\n  )\n}\n"],"names":["capitalizeFirstLetter","str","processInputModifiers","value","modifiers","FieldTextarea","input","meta","disabled","customOnBlur","minLength","maxLength","showCharacterCount","rows","rest","curLength","setLength","useState","_a","jsxs","Fragment","jsx","Textarea","_b","e","ev","Text","CharacterCount"],"mappings":"iNAuBA,MAAAA,EAAAC,GAAAA,EAAA,OAAA,CAAA,EAAA,cAAAA,EAAA,MAAA,CAAA,EAGAC,EAAA,CAAAC,EAAAC,KACE,OAAAD,GAAA,WACAC,EAAA,OACED,EAAAA,EAAA,QAEFC,EAAA,aACED,EAAAH,EAAAG,CAAA,IAEFA,GAGKE,EAAA,CAAA,CAAuB,MAAAC,EAC5B,KAAAC,EACA,SAAAC,EACA,UAAAJ,EACA,aAAAK,EACA,UAAAC,EAAA,EACY,UAAAC,EACZ,mBAAAC,EACA,KAAAC,EACA,GAAAC,CAEF,IAAA,SACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,WAAAC,EAAAZ,GAAA,YAAAA,EAAA,QAAA,YAAAY,EAAA,SAAA,CAAA,EAEA,OAAAC,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,SAAAd,EACC,UAAAE,EACA,UAAAC,EACA,QAAAJ,GAAA,MAAAA,EAAA,QAAAA,GAAA,MAAAA,EAAA,SAAA,gBAAA,WAC0D,KAAAM,GAAA,EACtC,GAAA,CAChB,QAAAU,EAAAT,GAAA,YAAAA,EAAA,QAAA,MAAAS,EAAA,OAAAT,EAAA,MAAA,OAAA,UACgD,EACpD,GAAAR,EACI,GAAAQ,EACA,OAAAU,GAAA,CAEFpB,IACEoB,EAAA,OAAA,MAAAtB,EAAAsB,EAAA,OAAA,MAAApB,CAAA,EACAE,EAAA,SAAAkB,CAAA,GAEFf,GACEA,EAAAe,CAAA,EAEFlB,EAAA,OAAA,CAAa,EACf,SAAAmB,GAAA,CAEEb,GAAAI,EAAAS,EAAA,OAAA,MAAA,MAAA,EACAnB,EAAA,SAAAmB,CAAA,CAAiB,CACnB,CAAA,EACFlB,EAAA,OAAAA,EAAA,SAAAc,EAAAK,EAAA,CAAA,GAAA,CAAA,SAAA,EAAA,OAAA,EAAA,MAAA,OAAA,EAAA,SAAAnB,EAAA,MAAA,EAKEK,GAAAD,IAAAJ,EAAA,SAAAA,EAAA,QAAAc,EAIAM,EAAC,CAAA,QAAAjB,EACU,QAAAC,EACA,YAAAI,CACI,CAAA,CACf,CAAA,CAAA,CAIR"}