{"version":3,"file":"CharacterCount-07f29cce.js","sources":["../../src/CharacterCount/CharacterCount.tsx"],"sourcesContent":["import { Text } from 'theme-ui'\n\nexport interface ICharacterCountProps {\n  currentSize: number\n  minSize: number\n  maxSize: number\n}\n\nexport const CharacterCount = ({\n  currentSize,\n  minSize,\n  maxSize,\n}: ICharacterCountProps) => {\n  const percentageOfMax = currentSize / maxSize\n  const characterCountThresholds = [\n    { value: 1.0, color: 'red', font_weight: 'bold' },\n    { value: 0.95, color: 'subscribed', font_weight: 'bold' },\n    { value: 0.9, color: 'green', font_weight: 'bold' },\n  ]\n\n  let color =\n    characterCountThresholds.find(\n      (threshold) => threshold.value <= percentageOfMax,\n    )?.color ?? 'green'\n\n  let fontWeight =\n    characterCountThresholds.find(\n      (threshold) => threshold.value <= percentageOfMax,\n    )?.font_weight ?? 'normal'\n\n  if (currentSize < minSize) {\n    color = characterCountThresholds[0].color\n    fontWeight = 'bold'\n  }\n\n  return (\n    <Text\n      data-cy=\"character-count\"\n      color={color}\n      ml=\"auto\"\n      sx={{ fontSize: 1, margin: 1, fontWeight: fontWeight }}\n    >\n      {currentSize} / {maxSize}\n    </Text>\n  )\n}\n"],"names":["CharacterCount","currentSize","minSize","maxSize","percentageOfMax","characterCountThresholds","color","_a","threshold","fontWeight","_b","jsxs","Text"],"mappings":"wGAQO,MAAAA,EAAA,CAAA,CAAwB,YAAAC,EAC7B,QAAAC,EACA,QAAAC,CAEF,IAAA,SACE,MAAAC,EAAAH,EAAAE,EACAE,EAAA,CAAiC,CAAA,MAAA,EAAA,MAAA,MAAA,YAAA,MAAA,EACiB,CAAA,MAAA,IAAA,MAAA,aAAA,YAAA,MAAA,EACQ,CAAA,MAAA,GAAA,MAAA,QAAA,YAAA,MAAA,CACN,EAGpD,IAAAC,IAAAC,EAAAF,EAAA,KAC2BG,GAAAA,EAAA,OAAAJ,CACW,IAFtC,YAAAG,EAEsC,QAAA,QAGtCE,IAAAC,EAAAL,EAAA,KAC2BG,GAAAA,EAAA,OAAAJ,CACW,IAFtC,YAAAM,EAEsC,cAAA,SAGtC,OAAAT,EAAAC,IACEI,EAAAD,EAAA,CAAA,EAAA,MACAI,EAAA,QAGFE,EACEC,EAAC,CAAA,UAAA,kBACS,MAAAN,EACR,GAAA,OACG,GAAA,CAAA,SAAA,EAAA,OAAA,EAAA,WAAAG,CAAA,EACkD,SAAA,CAEpDR,EAAA,MAAYE,CAAI,CAAA,CAAA,CAGvB"}