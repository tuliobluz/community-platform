"use strict";(self.webpackChunkoa_docs=self.webpackChunkoa_docs||[]).push([[677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={},o="Deployment via CircleCI",l={unversionedId:"Deployment/circle-ci",id:"Deployment/circle-ci",title:"Deployment via CircleCI",description:"We use CircleCI to handle automated build-test-deploy cycles when PRs and releases are created from the GitHub Repository",source:"@site/docs/Deployment/circle-ci.md",sourceDirName:"Deployment",slug:"/Deployment/circle-ci",permalink:"/Deployment/circle-ci",draft:!1,editUrl:"https://github.com/ONEARMY/community-platform/edit/master/packages/documentation/docs/Deployment/circle-ci.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"E2E Testing",permalink:"/Testing/end-to-end"},next:{title:"Automated Backup and Migration",permalink:"/Server Maintenance/dataMigration"}},c={},s=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"Firebase Deployment",id:"firebase-deployment",level:3},{value:"Slack Notifications",id:"slack-notifications",level:3},{value:"Runtime Variables",id:"runtime-variables",level:3},{value:"Misc Variables",id:"misc-variables",level:3},{value:"Google APIs",id:"google-apis",level:2},{value:"Functions Variables",id:"functions-variables",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deployment-via-circleci"},"Deployment via CircleCI"),(0,i.kt)("p",null,"We use CircleCI to handle automated build-test-deploy cycles when PRs and releases are created from the GitHub Repository"),(0,i.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,i.kt)("p",null,"The following environment variables should be set within the ",(0,i.kt)("a",{parentName:"p",href:"https://circleci.com/docs/2.0/env-vars/"},"CircleCI Environment"),", or via ",(0,i.kt)("a",{parentName:"p",href:"https://circleci.com/docs/2.0/contexts/"},"CircleCI Contexts")),(0,i.kt)("h3",{id:"firebase-deployment"},"Firebase Deployment"),(0,i.kt)("p",null,"The most secure way to provide the CI system access to deploy to firebase is by creating a service worker account with relevant permissions\nand storing the credentials as an environment variable (see this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/firebase/firebase-tools/issues/825"},"Github Issue")," for more info)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"GOOGLE_APPLICATION_CREDENTIALS_JSON\n")),(0,i.kt)("p",null,"If using multiple projects (e.g. staging/production) these can be configured in different contexts."),(0,i.kt)("p",null,"When configuring a service account the following permissions should be assigned:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Firebase Admin SDK Administrator Service Agent\nCloud Functions Service Agent\nCloud Functions Admin\nFirebase Hosting Admin\nCloud RuntimeConfig Admin\n")),(0,i.kt)("p",null,"Alternatively, a ",(0,i.kt)("inlineCode",{parentName:"p"},"FIREBASE_TOKEN")," environment variable can be created and set (See the ",(0,i.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/cli#cli-ci-systems"},"Firebase Docs"),"),\nhowever this is less preferable as the token would provide access to all a user's firebase projects"),(0,i.kt)("h3",{id:"slack-notifications"},"Slack Notifications"),(0,i.kt)("p",null,"Send slack notifications on deploy success/fail/approval-hold:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SLACK_DEFAULT_CHANNEL\nSLACK_ACCESS_TOKEN\n")),(0,i.kt)("p",null,"Currently passed with ",(0,i.kt)("inlineCode",{parentName:"p"},"circle-ci-slack-context")," context\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CircleCI-Public/slack-orb"},"circleci slack orb")," for info)"),(0,i.kt)("h3",{id:"runtime-variables"},"Runtime Variables"),(0,i.kt)("p",null,"Any variables prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_")," are automatically included with the runtime build. Currently we require:"),(0,i.kt)("p",null,"Firebase configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"REACT_APP_FIREBASE_API_KEY\nREACT_APP_FIREBASE_AUTH_DOMAIN\nREACT_APP_FIREBASE_DATABASE_URL\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID\nREACT_APP_FIREBASE_PROJECT_ID\nREACT_APP_FIREBASE_STORAGE_BUCKET\n")),(0,i.kt)("p",null,"Sentry error tracking"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"REACT_APP_SENTRY_DSN\n")),(0,i.kt)("p",null,"Google Analytics"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"REACT_APP_GA_TRACKING_ID\n")),(0,i.kt)("h3",{id:"misc-variables"},"Misc Variables"),(0,i.kt)("p",null,"Proposed (but not currently implemented)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"LIGHTHOUSE_API_KEY\n")),(0,i.kt)("h2",{id:"google-apis"},"Google APIs"),(0,i.kt)("p",null,"To deploy from service_account the following APIs will also need to be enabled for the project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://console.cloud.google.com/apis/api/firebasehosting.googleapis.com"},"Firebase Hosting API"))),(0,i.kt)("h2",{id:"functions-variables"},"Functions Variables"),(0,i.kt)("p",null,"Additional config used in cloud functions has also been included via ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase functions:config:set"),"\nE.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"discord_webhook"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"slack_webhook"),","),(0,i.kt)("p",null,"TODO - This requires further documentation (and possibly merging)"))}d.isMDXComponent=!0}}]);