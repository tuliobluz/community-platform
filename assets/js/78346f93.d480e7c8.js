"use strict";(self.webpackChunkoa_docs=self.webpackChunkoa_docs||[]).push([[947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={id:"tests",title:"Tests"},s=void 0,i={unversionedId:"Backend Development/tests",id:"Backend Development/tests",title:"Tests",description:"Backend tests are written with Jest and executed against a set of emulators for core services",source:"@site/docs/Backend Development/tests.md",sourceDirName:"Backend Development",slug:"/Backend Development/tests",permalink:"/Backend Development/tests",draft:!1,editUrl:"https://github.com/ONEARMY/community-platform/edit/master/packages/documentation/docs/Backend Development/tests.md",tags:[],version:"current",frontMatter:{id:"tests",title:"Tests"},sidebar:"mainSidebar",previous:{title:"Integrations",permalink:"/Backend Development/integrations"},next:{title:"Testing Overview",permalink:"/Testing/overview"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Running Locally",id:"running-locally",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Utilities and Examples",id:"utilities-and-examples",level:2},{value:"Mocking Methods",id:"mocking-methods",level:3},{value:"Execute Functions Directly",id:"execute-functions-directly",level:3},{value:"Seed and Teardown Data",id:"seed-and-teardown-data",level:3},{value:"Production Data",id:"production-data",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Backend tests are written with ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/getting-started"},"Jest")," and executed against a set of emulators for core services"),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You will need to support the running of ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/emulator-suite/install_and_configure#install_the_local_emulator_suite"},"Firebase Emulators")),(0,r.kt)("h2",{id:"running-locally"},"Running Locally"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn workspace functions test:watch\n")),(0,r.kt)("p",null,"This will startup the firebase emulator suite, compile functions, and watch for any changes to function or spec test files"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The emulator console can be viewed on ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:4001"},"localhost:4001"))),(0,r.kt)("p",null,"To run just a single test the interactive prompts can be used to provide a matching filename path, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ yarn workspace functions test:watch\n\n$ Watch Usage\n> Press p to filter by a filename regex pattern\n\n$ pattern \u203a mySpec\n\n")),(0,r.kt)("p",null,"This will automatically watch for changes to any files that match the regular expression ",(0,r.kt)("inlineCode",{parentName:"p"},"/mySpec/")),(0,r.kt)("h2",{id:"writing-tests"},"Writing Tests"),(0,r.kt)("p",null,"Tests are written in ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/getting-started"},"Jest"),", with filenames ending ",(0,r.kt)("inlineCode",{parentName:"p"},".spec.ts")),(0,r.kt)("h2",{id:"utilities-and-examples"},"Utilities and Examples"),(0,r.kt)("h3",{id:"mocking-methods"},"Mocking Methods"),(0,r.kt)("p",null,"Mocks are a useful tool to reduce the number of additional services a test interacts with, making them more resilient to changes in the codebase."),(0,r.kt)("p",null,"There are various ways to achieve this, many of which are outlines in the Jest ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/mock-functions"},"Mock Functions")," documentation"),(0,r.kt)("p",null,"A few methods commonly used in the codebase include:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Imports"),"\nReturn a set of mock methods or utilities in place of an import. An example from the frontend code is when we want to avoid importing all stores, but instead just mock a single method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"jest.mock('src/common/hooks/useCommonStores', () => {\n  return {\n    useCommonStores() {\n      return {\n        stores: {\n          userStore: {\n            fetchAllVerifiedUsers: jest.fn(),\n          },\n        },\n      }\n    },\n  }\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Class Methods"),"\nReplace specific class method with an alternative mock method. E.g. if the code relates to the active user, a mock stub could be used instead. An an artificial example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import UserMethods from './userMethods'\n\nUserMethods.activeUser = jest.fn().mockReturnValue({ id: 'fake_user' })\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Replace or extend multiple class methods with mocks"),"\nSimilarly, entire mock classes can be used where appropriate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import UserMethods from './userMethods'\n\nclass MockUserMethods implements Partial<UserMethods>{\n  activeUser: () => jest.fn().mockReturnValue({ id: 'fake_user' })\n  setUser: () => jest.fn()\n}\n")),(0,r.kt)("h3",{id:"execute-functions-directly"},"Execute Functions Directly"),(0,r.kt)("p",null,"It is possible to directly execute any function within the test environment without its required trigger.\nA utility ",(0,r.kt)("inlineCode",{parentName:"p"},"FirebaseEmulatedTest")," class is used to wrap the function invocation so that it can be used async, e.g."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"myFunction.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import functions from 'firebase-functions'\n\nexports.default = functions.firestore\n  .document(`mockEndpoint/{id}`)\n  .onUpdate((change) => {\n    return doSomething(change)\n  })\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"myFunction.spec.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { FirebaseEmulatedTest } from '../test/Firebase/emulator'\nimport myFunction from './myFunction.ts'\n\nconst beforeData = { field: 'initialValue' }\nconst afterData = { field: 'changedValue' }\n\nconst change = FirebaseEmulatedTest.mockFirestoreChangeObject(\n  beforeData,\n  afterData,\n  'mockEndpoint',\n  'mockDocId',\n)\n\nawait FirebaseEmulatedTest.run(myFunction, change)\n")),(0,r.kt)("p",null,"Additional utilities can also be used to provide a mock of the triggering context. In the example above a mock ",(0,r.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"after")," data snapshot is created to mimic the firestore document change trigger used by the function"),(0,r.kt)("h3",{id:"seed-and-teardown-data"},"Seed and Teardown Data"),(0,r.kt)("p",null,"The test utilities also have methods for seeding and clearing the Firestore DB if required for tests."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"myFunction.spec.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"beforeEach(async () => {\n  await FirebaseEmulatedTest.seedFirestoreDB('users', [{ _id: 'user1 ' }])\n})\nafterEach(async () => {\n  await FirebaseEmulatedTest.clearFirestoreDB()\n})\n")),(0,r.kt)("p",null,"Additionally all emulator data will be cleared when scripts are terminated"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If your test function interacts directly with an empty database endpoint it may throw an error",(0,r.kt)("br",{parentName:"p"}),"\n","(various issues on github, should review in the future)")),(0,r.kt)("p",null,"The easiest workaround is to seed the endpoint without any docs, which will allow the emulators to return an empty array from queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"await FirebaseEmulatedTest.seedFirestoreDB('empty_endpoint',[])\n")),(0,r.kt)("h3",{id:"production-data"},"Production Data"),(0,r.kt)("p",null,"There may also be some cases where methods want to be tested against production data to check for any additional edge-cases or give a preview new feature development."),(0,r.kt)("p",null,"There currently isn't a single automated way to do this, however you can see an example of the manual steps involved in the ",(0,r.kt)("inlineCode",{parentName:"p"},"test_functions")," step of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ONEARMY/community-platform/blob/feat/aggregation-tests/.circleci/config.yml#L244-L245"},"CircleCI pipeline")),(0,r.kt)("p",null,"Alternatively developers can follow the steps in ",(0,r.kt)("a",{parentName:"p",href:"/Backend%20Development/firebase-emulators-docker"},"Firebase Emulators Docker")," to run the docker emulators locally and manually invoke functions"))}d.isMDXComponent=!0}}]);